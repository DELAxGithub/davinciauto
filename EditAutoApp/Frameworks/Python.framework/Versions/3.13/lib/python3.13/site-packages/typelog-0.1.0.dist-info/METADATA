Metadata-Version: 2.4
Name: typelog
Version: 0.1.0
Summary: Advanced copy-typing measurement tool for macOS with WPM, accuracy, and keystroke analysis
Author: Hiroshi Kodera
Project-URL: Homepage, https://github.com/DELAxGithub/zenmonkey
Project-URL: Repository, https://github.com/DELAxGithub/zenmonkey.git
Project-URL: Issues, https://github.com/DELAxGithub/zenmonkey/issues
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Operating System :: MacOS
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pyobjc-framework-Quartz>=10.0
Requires-Dist: rich>=13.0.0
Requires-Dist: pandas>=2.0.0
Requires-Dist: numpy>=1.24.0
Requires-Dist: tomli>=2.0.0
Requires-Dist: click>=8.0.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Provides-Extra: viz
Requires-Dist: matplotlib>=3.7.0; extra == "viz"
Requires-Dist: seaborn>=0.12.0; extra == "viz"
Dynamic: license-file

# TypeLog - Advanced Copy-Typing Measurement Tool

TypeLog is a comprehensive copy-typing measurement tool for macOS that provides real-time WPM tracking, accuracy analysis, and detailed keystroke analytics. Designed for serious typing practice with professional-grade metrics and analysis.

## Features

### üéØ Core Functionality
- **Real-time typing measurement** with millisecond precision
- **Copy-typing sessions** with target text synchronization
- **Live metrics display** including WPM, accuracy, and backspace rate
- **Comprehensive error analysis** with character confusion matrix
- **Professional reporting** with CSV/JSON export

### üìä Metrics & Analytics
- **Gross/Net WPM** calculation with industry-standard formulas
- **Accuracy tracking** with real-time feedback
- **Backspace rate** and keystroke efficiency (KSPC)
- **Consistency analysis** with coefficient of variation
- **Time-binned WPM** for progress visualization
- **Character confusion matrix** for error pattern analysis

### üñ•Ô∏è User Interface
- **Rich terminal UI** with live progress display
- **Color-coded metrics** with pass/fail indicators
- **Text progress visualization** with cursor tracking
- **Real-time pace guidance** with target WPM comparison
- **Pause/resume functionality** for flexible sessions

### üìà Data Export
- **Session metadata** in JSON format
- **Keystroke logs** in CSV with timing data
- **Summary reports** with performance analysis
- **Confusion matrices** for error analysis
- **WPM timeline data** for progress tracking

## Installation

### Requirements
- macOS 10.14+ (Mojave or later)
- Python 3.11 or higher
- Accessibility permissions for keyboard monitoring

### Install from Source

1. **Clone the repository:**
   ```bash
   git clone https://github.com/DELAxGithub/zenmonkey.git
   cd zenmonkey
   ```

2. **Install dependencies:**
   ```bash
   pip install -e .
   ```

3. **Grant accessibility permissions:**
   - Go to **System Settings** ‚Üí **Privacy & Security** ‚Üí **Accessibility**
   - Add your terminal application (Terminal.app, iTerm2, etc.)
   - Enable the permission

### Development Installation

```bash
# Install with development dependencies
pip install -e ".[dev]"

# Install with visualization support
pip install -e ".[viz]"
```

## Quick Start

### Basic Usage

1. **Start a typing session with a text file:**
   ```bash
   typelog start --text-file samples/ielts_essay.txt
   ```

2. **Use clipboard content:**
   ```bash
   # Copy text to clipboard first, then:
   typelog start --text-clipboard
   ```

3. **Add session notes and target WPM:**
   ```bash
   typelog start --text-file samples/ielts_essay.txt \
     --session-note "IELTS practice session" \
     --pace-guide 70
   ```

### Session Controls
- **Enter**: Start typing session
- **Escape**: Pause/resume session
- **Cmd+Enter**: End session early

### Command Line Options

```bash
typelog start [OPTIONS]

Options:
  --text-file PATH          Path to text file to type
  --text-clipboard          Use text from clipboard
  --session-note TEXT       Note to add to session metadata
  --pace-guide FLOAT        Target WPM for pacing guidance
  --bin INTEGER             Time bin size for WPM calculation (default: 30s)
  --hide-text               Hide text display during typing
  --help                    Show help message
```

## Sample Texts

The `samples/` directory includes practice texts:
- `short_test.txt` - Quick pangram for testing
- `ielts_essay.txt` - Academic essay for advanced practice
- `programming_text.txt` - Code snippet with symbols

## Configuration

### Default Configuration

TypeLog looks for configuration files in this order:
1. `./config/config.toml`
2. `./config.toml`
3. `~/.typelog/config.toml`
4. `~/.config/typelog/config.toml`

### Configuration Example

```toml
[target]
pace_guide_wpm = 70
bin_seconds = 30

[policy]
allow_paste = false
allow_arrow_nav = false
count_unfixed_errors_in_netwpm = true

[ui]
tick_ms = 200
show_accuracy = true
show_backspace_rate = true

[scoring]
min_accuracy = 0.97
max_backspace_rate = 0.03
max_kspc = 1.15
min_net_wpm = 65
max_consistency = 0.12
```

## Performance Targets

### Proficiency Levels
- **Novice**: < 30 WPM
- **Beginner**: 30-50 WPM
- **Intermediate**: 50-65 WPM
- **Proficient**: 65-80 WPM (target)
- **Advanced**: 70+ WPM
- **Excellent**: 80+ WPM

### Quality Standards
- **Accuracy**: ‚â• 97%
- **Backspace Rate**: ‚â§ 3%
- **KSPC** (Keystrokes per Character): ‚â§ 1.15
- **Consistency** (CV): ‚â§ 0.12

### Pass Criteria
To pass a session, you must achieve:
- Net WPM ‚â• 65
- Accuracy ‚â• 97%
- Backspace Rate ‚â§ 3%

## Data Export

### File Locations
- **Logs**: `logs/YYYYMMDD_HHMMSS_*`
- **Reports**: `reports/YYYYMMDD_HHMMSS_*`

### Export Files
- `session.json` - Complete session metadata and metrics
- `keystrokes.csv` - Detailed keystroke log with timing
- `summary.csv` - Performance summary and pass/fail status
- `confusions.csv` - Character confusion matrix (if errors exist)
- `wpm_timeline.csv` - WPM progression over time

### Data Schema

#### Keystrokes CSV
```csv
ts_ms,key,is_backspace,expected_char,match,cursor_before,cursor_after,raw_code
1723950001123,t,0,t,1,124,125,17
1723950001180,h,0,h,1,125,126,4
```

#### Session JSON
```json
{
  "session_id": "20250818T1752-abc123",
  "chars_total": 1342,
  "duration_sec": 1765,
  "gross_wpm": 72.4,
  "net_wpm": 68.9,
  "accuracy": 0.975,
  "backspace_rate": 0.028,
  "kspc": 1.11
}
```

## Architecture

### Core Components
- **EventMonitor**: macOS EventTap-based keyboard capture
- **SessionEngine**: Input synchronization and progress tracking
- **MetricsCalculator**: WPM, accuracy, and advanced analytics
- **CLI Interface**: Rich terminal UI with real-time display
- **DataExporter**: Multi-format data export functionality

### Key Features
- **Low-level keyboard monitoring** with EventTap API
- **Millisecond precision timing** for accurate measurements
- **Real-time synchronization** between input and target text
- **Comprehensive error analysis** with confusion matrices
- **Professional reporting** suitable for training programs

## Troubleshooting

### Accessibility Permissions
If you get permission errors:
1. Open **System Settings** ‚Üí **Privacy & Security** ‚Üí **Accessibility**
2. Find your terminal application in the list
3. Toggle it off and on again
4. Restart your terminal

### PyObjC Installation Issues
If EventTap monitoring fails:
```bash
pip install --upgrade pyobjc-framework-Quartz
```

### TOML Configuration Issues
For Python < 3.11:
```bash
pip install tomli tomli-w
```

## Development

### Running Tests
```bash
pytest tests/ -v
```

### Code Quality
```bash
# Format code
black typelog/

# Type checking
mypy typelog/

# Linting
flake8 typelog/
```

### Building Distribution
```bash
pip install build
python -m build
```

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests for new functionality
5. Ensure code quality checks pass
6. Submit a pull request

## License

MIT License - see LICENSE file for details.

## Support

- **Issues**: [GitHub Issues](https://github.com/DELAxGithub/zenmonkey/issues)
- **Documentation**: This README and inline code documentation
- **Examples**: See `samples/` directory for practice texts

---

**TypeLog** - Professional copy-typing measurement for serious practice and improvement.
